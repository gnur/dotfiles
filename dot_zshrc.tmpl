{{ if eq .chezmoi.os "darwin" -}}

export ANDROID_HOME="$HOME/Library/Android/sdk"

export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"
export PATH="$PATH":"$HOME/.pub-cache/bin"
export PATH="$PATH":"$HOME/bin/google-cloud-sdk/bin"


export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/erwindekeijzer/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/erwindekeijzer/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/erwindekeijzer/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/erwindekeijzer/google-cloud-sdk/completion.zsh.inc'; fi


alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
export GOPATH="$HOME/go"; export GOROOT="$HOME/.go"; export PATH="$GOPATH/bin:$PATH"; # g-install: do NOT edit, see https://github.com/stefanmaric/g
export PATH="/Users/erwindekeijzer/code/src/github.com/gnur/scripts:/opt/homebrew/bin/:$PATH"
{{ end -}}


export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export PATH="$HOME/bin/flutter/bin:$PATH"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export TERM=xterm-256color

alias s="tmux attach -d -t shell || tmux new -t shell"
alias vi=helix
alias k=kubectl
alias kctx=kubectx
alias kns=kubens
alias tf=terraform
alias x="exa --long --classify --icons --no-user --no-permissions"
alias ls=lsd

alias agedec="age --decrypt -i ~/.agekey"

if [ -n "$PYTHONPATH" ]; then
    export PYTHONPATH='/opt/homebrew/Cellar/pdm/2.4.7/libexec/lib/python3.11/site-packages/pdm/pep582':$PYTHONPATH
else
    export PYTHONPATH='/opt/homebrew/Cellar/pdm/2.4.7/libexec/lib/python3.11/site-packages/pdm/pep582'
fi

# make sure history is shared and kept for a much longer time
setopt hist_ignore_all_dups
setopt extended_history
setopt inc_append_history
setopt share_history
HISTFILE=~/.zsh_history
HISTSIZE=999999999
SAVEHIST=$HISTSIZE

# Download Znap, if it's not there yet.
[[ -f ~/Git/zsh-snap/znap.zsh ]] ||
    git clone https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap

func mnrp() {
  cd /Users/erwindekeijzer/code/src/github.com/gnur/mnrp
}


func vietc () {
  cd /etc
  f=$(sudo fd --type f --hidden | fzf --ansi --no-mouse --query "$*" --preview 'bat --style=numbers --color=always {}')
  if [[ -z $f ]]; then
    return
  fi

  sudo helix "$f"
}

export FZF_CTRL_T_COMMAND="fd --hidden"
export FZF_CTRL_T_OPTS="--preview 'preview {}'"


func ctrl-space() {
  RG_PREFIX="rg --hidden --iglob '!google-cloud-sdk' --iglob '!flutter' --column --line-number --no-heading --color=always --smart-case "
  RG_SUFFIX="~/prive ~/code/src/github.com/gnur ~/bin ~/Documents ~/.config"

  FD_PREFIX="fd --type d --hidden"
  FD_SUFFIX="$HOME"
  VIF_CMD="fd --type f --hidden . '$HOME'"

  INITIAL_QUERY="${*:-}"
  f=$(echo -n '' | fzf --ansi --query "$INITIAL_QUERY" \
    --bind "change:reload:sleep 0.1; $RG_PREFIX {q} $RG_SUFFIX || true" \
    --bind "start:reload($FD_PREFIX {q} $FD_SUFFIX)+unbind(ctrl-d,change)" \
    --bind "ctrl-f:unbind(ctrl-f)+change-prompt(2. edit> )+enable-search+reload($VIF_CMD)+transform-query('')+change-preview(exa --long --classify --icons --no-user --no-permissions {})" \
    --bind "ctrl-r:unbind(ctrl-r)+change-prompt(3. ripgrep> )+disable-search+reload($RG_PREFIX {q} $RG_SUFFIX || true)+rebind(change,ctrl-f)+transform-query('')+change-preview(bat --color=always {1} --highlight-line {2})" \
    --color "hl:-1:underline,hl+:-1:underline:reverse" \
    --prompt '1. cd > ' \
    --delimiter : \
    --header '╱ CTRL-R (ripgrep mode) ╱ CTRL-F (edit mode) ╱ CTRL-D (dir mode) /' \
    --preview 'exa --long --classify --icons --no-user --no-permissions {}' \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' )

    fields=$(echo "$f" | grep -o ':' | wc -l)

    if [[ "${fields}" -gt 1 ]]; then
      filename=$(echo "$f" | cut -d ':' -f 1)
      line=$(echo "$f" | cut -d ':' -f 2)
      hx "${filename}" +${line}
      return
    fi
    if [[ -z $f ]]; then
      return
    fi

    if [[ -d $f ]]; then
      cd "${f}"
      zle reset-prompt
      return
    fi
    if [[ -f $f ]]; then
      hx "${f}"
      return
    fi
}
zle -N cmd_widget ctrl-space
bindkey '^ ' cmd_widget

func erwin-enc () {
  AGEKEY=age1lhg9rucza42kmmmtnthme35gw0tpeyqwxad5k7rl5mpyaqmk0q3s4srwvp

  target="$1"
  suffix="_$(date +%F_%T).tar.lz4.age"

  if [[ ! -d "$target" ]]; then
    echo "invalid directory provided"
    return 1
  fi
  du -sh "${target}"

  targetfile="$HOME/backups/${target}${suffix}"

  echo "$targetfile"

  tar cf - "$target" | lz4 | age -r "$AGEKEY" > "${targetfile}"

  du -sh "${targetfile}"
}

func erwin-dec () {
  target="$1"

  if [[ ! -f "$target" ]]; then
    echo "invalid backup archive provided"
    return 1
  fi
  age --decrypt -i ~/key.txt ${target} | lz4 -d | tar xvf -
}

func en () {

  AGEKEY=age1lhg9rucza42kmmmtnthme35gw0tpeyqwxad5k7rl5mpyaqmk0q3s4srwvp
  tdir=$(mktemp -d)
  cd "${tdir}" || return 1
  #setup trap to remove this dir

  echo "Getting raw note from the internet"

  wget -q https://dekeijzer.xyz/note.md.age

  if [[ -e note.md.age ]]; then
    age --decrypt --identity=$HOME/key.txt --output "note.md" note.md.age
    rm note.md.age
  else
    echo "Failed to download file from the internet, returning without saving"
    cd - 
    rm -rf -- "$tdir"
    return 1
  fi

  if [[ ! -e note.md ]]; then
    echo "Decryption seems to have failed, returning"
    cd - 
    rm -rf -- "$tdir"
    return 2
  fi
  
  
  cp note.md note.md.before

  hx note.md
  if cmp --silent note.md note.md.before; then
    echo "no changes, nothing to do"
    cd - 
    rm -rf -- "$tdir"
    return 0
  fi

  echo "Encrypting file"
  age --recipient="${AGEKEY}" note.md > note.md.age

  echo "Uploading back to uranus"
  scp note.md.age erwin@uranus:/var/www/dekeijzer.xyz/note.md.age

  cd -
  rm -rf -- "$tdir"

}

source ~/Git/zsh-snap/znap.zsh  # Start Znap
export EDITOR=hx

# `znap prompt` makes your prompt visible in less than 12ms!
# znap prompt sindresorhus/pure

# `znap source` automatically downloads and activates your plugins.
#znap source marlonrichert/zsh-autocomplete
znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-syntax-highlighting
znap source ellie/atuin
znap source unixorn/fzf-zsh-plugin

fpath=(~/.zsh/completion $fpath)

autoload -U compinit
compinit -i
bindkey -e

eval "$(starship init zsh)"
eval "$(atuin init zsh)"
eval "$(direnv hook zsh)"

source "$HOME/.cargo/env"


func startTmux () {
if [[ -z "$TMUX" && -z "$VSCODE_PID" ]]; then
  if tmux has-session -t shell; then
    exec tmux attach -d -t shell
  else
    exec tmux new -t shell
  fi
fi
}

{{ if eq .chezmoi.os "darwin" -}}
parentProcess=$(ps -e | grep $PPID | grep -v grep)

if ! echo $parentProcess | grep -q DevPod; then
  startTmux
fi


{{else}}
parent=$(ps -o comm= -p "$PPID")
if [[ "${parent}" == "ttyd" ]]; then
  startTmux
fi
{{ end }}

