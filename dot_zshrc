
export GOPATH="$HOME/go"; export GOROOT="$HOME/.go"; export PATH="$GOPATH/bin:$PATH"; # g-install: do NOT edit, see https://github.com/stefanmaric/g
export PATH="$HOME/bin:$PATH"
export PATH="/Users/erwindekeijzer/code/src/github.com/gnur/scripts:$PATH"

alias vi=~/.local/bin/lvim
alias vim=~/.local/bin/lvim
alias s="tmux attach -d || tmux"
alias k=kubectl
alias kctx=kubectx
alias kns=kubens
alias tf=terraform
alias x="exa --long --classify --icons --no-user --no-permissions"
alias tailscale="/Applications/Tailscale.app/Contents/MacOS/Tailscale"

alias agedec="age --decrypt -i ~/.agekey"

# Download Znap, if it's not there yet.
[[ -f ~/Git/zsh-snap/znap.zsh ]] ||
    git clone https://github.com/marlonrichert/zsh-snap.git ~/Git/zsh-snap

func ccd () {
  cd
  f=$(fd --type d --hidden | fzf --no-mouse)
  if [[ -z $f ]]; then
    return
  fi

  cd "$f"
}


source ~/Git/zsh-snap/znap.zsh  # Start Znap
export EDITOR=/Users/erwindekeijzer/.local/bin/lvim

# `znap prompt` makes your prompt visible in less than 12ms!
# znap prompt sindresorhus/pure

# `znap source` automatically downloads and activates your plugins.
#znap source marlonrichert/zsh-autocomplete
znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-syntax-highlighting

autoload -U compinit
compinit -i

eval "$(starship init zsh)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/erwindekeijzer/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/erwindekeijzer/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/erwindekeijzer/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/erwindekeijzer/google-cloud-sdk/completion.zsh.inc'; fi

bindkey -e
eval "$(direnv hook zsh)"


# ATUIN

# Source this in your ~/.zshrc
autoload -U add-zsh-hook

export ATUIN_SESSION=$(atuin uuid)
export ATUIN_HISTORY="atuin history list"

_atuin_preexec(){
	id=$(atuin history start "$1")
	export ATUIN_HISTORY_ID="$id"
}

_atuin_precmd(){
	local EXIT="$?"

	[[ -z "${ATUIN_HISTORY_ID}" ]] && return


	(RUST_LOG=error atuin history end $ATUIN_HISTORY_ID --exit $EXIT &) > /dev/null 2>&1
}

_atuin_search(){
	emulate -L zsh
	zle -I

	# Switch to cursor mode, then back to application
	echoti rmkx
	# swap stderr and stdout, so that the tui stuff works
	# TODO: not this
	output=$(RUST_LOG=error atuin search -i $BUFFER 3>&1 1>&2 2>&3)
	echoti smkx

	if [[ -n $output ]] ; then
		LBUFFER=$output
	fi

	zle reset-prompt
}

add-zsh-hook preexec _atuin_preexec
add-zsh-hook precmd _atuin_precmd

zle -N _atuin_search_widget _atuin_search

if [[ -z $ATUIN_NOBIND ]]; then
	bindkey '^r' _atuin_search_widget

	# depends on terminal mode
	bindkey '^[[A' _atuin_search_widget
	bindkey '^[OA' _atuin_search_widget
fi

